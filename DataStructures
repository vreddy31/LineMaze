#pragma config(Sensor, S1,     color,          sensorEV3_Color)
#pragma config(Motor,  motorA,          A,             tmotorEV3_Large, PIDControl, encoder)
#pragma config(Motor,  motorB,          B,             tmotorEV3_Large, PIDControl, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard


typedef struct {
  int northWall;
  int eastWall;
  int southWall;
  int westWall;
}Cell;

 int curDir = 0; // 0 = N, 1 = E, 2 = S, 3 = W

task main () {

  int move = 0;

  //change to suit where start position is
  int curRow = 0;
  int curCol = 0;
  int endRow = 0;
  int endCol = 0;
  int x = 0;

  Cell Grid [4][6] //row 0 col 0 is top right corner
  
  GridInit();
  
  while( (curRow != endRow) && (curCol != endCol) ){ 
  move = TurnRight();
  
  //update direction: need new method
  
 while( move == 0 ){
  move = TurnLeft();
  x++;
  if(x == 2){
    move = 1;
    x = 0;
   }
 }
 
 //move forward
  
  }
  

}


void GridInit(void){
  for(int i=0;i<4;i++){
    for(int j=0;j<6;j++){
      Grid{i][j].northWall=99;
      Grid{i][j].eastWall=99;
      Grid{i][j].southWall=99;
      Grid{i][j].westWall=99;
    }
}


int TurnLeft(){
   setMotorSpeed(A, -15);
	 setMotorSpeed(B, 15);
  
   while(getMotorEncoder(A) < (getMotorEncoder(A) - 300) ){
	 }
	 setMotorSpeed(A, 0);
	 setMotorSpeed(B, 0);
   
   if(getColorReflected(color) < 30 ){
     return 1;
    }
    
    else if{
    
    setMotorSpeed(A, 5);
	  setMotorSpeed(B, 5);
    
    while(getMotorEncoder(A) < (getMotorEncoder(A) + 100 ) ){
  	}
	  setMotorSpeed(A, 0);
	  setMotorSpeed(B, 0);
    
    if(getColorReflected(color) < 30 ){
      setMotorSpeed(A, -5);
	    setMotorSpeed(B, -5);
    
      while(getMotorEncoder(A) > (getMotorEncoder(A) - 100 ) ){
  	  }
	  setMotorSpeed(A, 0);
	  setMotorSpeed(B, 0);
    
    return 1;
    }
    else{
      setMotorSpeed(A, -5);
	    setMotorSpeed(B, -5);
    
      while(getMotorEncoder(A) > (getMotorEncoder(A) - 100 ) ){
  	  }
	    setMotorSpeed(A, 0);
	    setMotorSpeed(B, 0);
      
      return 0;
    }
  }
    
    
}


int TurnRight(){
  resetMotorEncoder(A);
	resetMotorEncoder(B);
  
  setMotorSpeed(A, 15);
	setMotorSpeed(B, -15);
  
  while(getMotorEncoder(A) < 300 ){
	}
	setMotorSpeed(A, 0);
	setMotorSpeed(B, 0);
  
  if(getColorReflected(color) < 30 ){
    return 1;
  }
  else if{
    
    setMotorSpeed(A, 5);
	  setMotorSpeed(B, 5);
    
    while(getMotorEncoder(A) < (getMotorEncoder(A) + 100 ) ){
  	}
	  setMotorSpeed(A, 0);
	  setMotorSpeed(B, 0);
    
    if(getColorReflected(color) < 30 ){
      setMotorSpeed(A, -5);
	    setMotorSpeed(B, -5);
    
      while(getMotorEncoder(A) > (getMotorEncoder(A) - 100 ) ){
  	  }
	  setMotorSpeed(A, 0);
	  setMotorSpeed(B, 0);
    
    return 1;
    }
    else{
      setMotorSpeed(A, -5);
	    setMotorSpeed(B, -5);
    
      while(getMotorEncoder(A) > (getMotorEncoder(A) - 100 ) ){
  	  }
	    setMotorSpeed(A, 0);
	    setMotorSpeed(B, 0);
      
      return 0;
    }
  }
  
}
